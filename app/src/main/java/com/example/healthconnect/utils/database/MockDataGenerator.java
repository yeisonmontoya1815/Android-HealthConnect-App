package com.example.healthconnect.utils.database;

import android.annotation.SuppressLint;
import android.util.Log;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Random;

public class MockDataGenerator {
    public static void generateMockData() {
        List<Patient> patients = new ArrayList<>();
        Random random = new Random();

        // Generate 1000 patients
        for (int i = 1; i <= 1000; i++) {
            @SuppressLint("DefaultLocale") Patient patient = new Patient(
                    0, // ID will be auto-generated by the database
                    "Patient " + i,
                    getRandomDateOfBirth(),
                    i % 2 == 0 ? "Male" : "Female",
                    "123-456-" + String.format("%04d", i),
                    "patient" + i + "@example.com",
                    160 + Math.random() * 20, // Random height between 160cm and 180cm
                    50 + Math.random() * 40  // Random weight between 50kg and 90kg
            );

            long patientId = Database.addPatient(patient);
            if (patientId != -1) {
                patient.setId((int) patientId);
                patients.add(patient);
            }
        }

        if (patients.isEmpty()) {
            Log.e("MockDataGenerator", "No patients were generated. Cannot create appointments.");
            return;
        }

        String[] appointmentTypes = {"Routine Checkup", "Follow-up", "Specialist Visit", "Vaccination", "Emergency"};
        Calendar calendar = Calendar.getInstance();

        // Generate 3000 appointments
        for (int i = 1; i <= 3000; i++) {
            // Set a random date within the year 2024
            int dayOfYear = 1 + random.nextInt(365); // Day of the year between 1 and 365
            calendar.set(Calendar.YEAR, 2024);
            calendar.set(Calendar.DAY_OF_YEAR, dayOfYear);

            int appointmentDate = calendar.get(Calendar.YEAR) * 10000
                    + (calendar.get(Calendar.MONTH) + 1) * 100
                    + calendar.get(Calendar.DAY_OF_MONTH);

            // Random time between 08:00 and 17:59
            int appointmentTime = 800 + (random.nextInt(10) * 100) + random.nextInt(60);

            Appointment appointment = new Appointment(
                    0, // ID will be auto-generated by the database
                    patients.get(random.nextInt(patients.size())), // Assign a random patient
                    appointmentTypes[random.nextInt(appointmentTypes.length)], // Random appointment type
                    appointmentDate, // Random date
                    appointmentTime, // Random time
                    "", // Empty notes
                    "", // Empty medicines
                    "", // Empty exams
                    i % 2 == 0 // Appointment not done
            );

            long appointmentId = Database.addAppointment(appointment);
            if (appointmentId != -1) {
                appointment.setId((int) appointmentId);
            }
        }

        Log.d("MockDataGenerator", "Generated " + patients.size() + " patients and 3000 appointments.");
    }

    private static int getRandomDateOfBirth() {
        Random random = new Random();

        int year = 1950 + random.nextInt(51); // Year between 1950 and 2000
        int month = 1 + random.nextInt(12);  // Month between 1 and 12
        int day = getRandomDayForMonth(month, year, random);

        return year * 10000 + month * 100 + day;
    }

    private static int getRandomDayForMonth(int month, int year, Random random) {
        int maxDay;

        if (month == 2) {
            // Check for leap year
            maxDay = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) ? 29 : 28;
        } else if (month == 4 || month == 6 || month == 9 || month == 11) {
            maxDay = 30;
        } else {
            maxDay = 31;
        }

        return 1 + random.nextInt(maxDay); // Random day between 1 and maxDay
    }
}
